{"pageProps":{"postData":{"id":"3d-ui","contentHtml":"<h2>Combine Webgl and React to create 3d UI</h2>\n<p>In modeling software and game editors, 3dUI is an indispensable part, through which user can intuitively manipulate the objects they edit. Some common 3dUIs are looks like:</p>\n<div class='m-5'></div>\n<img src=\"/images/3d-ui/manipulators.png\" alt=\"common 3dUIs\" style=\"width:800px; margin:auto\"/>\n<div class='m-5'></div>\n<p>In the Box3 game editor, we also need such manipulators. If we think about it a little bit, we will find that these 3d ui and ordinary React components actually have a lot in common. For example, they can be easily created and destroyed, they can accept props to calculate the initial state, and they have to actively respond to the user’s actions (translation, rotation, scale).</p>\n<div class='m-5'></div>\nThat why we want to use the lifecycle of traditional React components to control the creation and destruction of 3d UI. But here's another problem, the data used in webgl is outside of React, but with the React Context API, we can inject that data into React.\n<div class='m-5'></div>\n<p>Here is the diagram show how this system was designed.</p>\n<div class='m-5'></div>\n<img src=\"/images/3d-ui/diagram.png\" alt=\"system design diagram\" style=\"width:500px; margin:auto\"/>\n<div class='m-5'></div>\n<p>So, what exactly is a 3dUI?</p>\n<div class='m-5'></div>\n<p>If you look at it from a React perspective, the combination of a <code>UI3DContext.Consumer</code> and a <code>EliminateWrapper</code> in the diagram is a 3dUI component. If you look at it from the perspective of the WebGL rendering engine, then the 3dUI data generated by the <code>UI3DContext.Consumer</code> is actually a 3dUI Element.</p>\n<p>At the specific code implementation level, we use <a class=\"text-blue-700\" href=\"https://github.com/mikolalysenko/mudb\">Mudb</a> to build the schema of UI3dState.(Mudb is the core opensource library that we use in ‘Box3’, it was build by our team). You may use any method you like, but the overall design pattern has shown in the diagram.</p>\n<p>The simplest example would be a 3d Point(or you can call it Sphere), I will use it for a detailed demonstration.\nFirst, we define the schema for UI3DState and UI3DSphere.</p>\n<div class='preCodeBlock'></div>\n<pre><code class=\"language-Typescript\"><span class=\"hljs-comment\">// define mouse event schema</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DMouseEventSchema = <span class=\"hljs-keyword\">new</span> MuStruct({\n    <span class=\"hljs-attr\">eye</span>: Vec3Schema,\n    <span class=\"hljs-attr\">mouseButton</span>: <span class=\"hljs-keyword\">new</span> MuUint8(),\n    <span class=\"hljs-attr\">mouseState</span>: <span class=\"hljs-keyword\">new</span> MuUint8(),\n    <span class=\"hljs-attr\">worldPosition</span>: Vec3Schema,\n    <span class=\"hljs-attr\">screenPosition</span>: Vec2Schema,\n});\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> UI3DMouseEvent = <span class=\"hljs-keyword\">typeof</span> UI3DMouseEventSchema.identity;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> UI3DMouseHandler = <span class=\"hljs-function\">(<span class=\"hljs-params\">event:UI3DMouseEvent</span>) =&gt;</span> <span class=\"hljs-built_in\">boolean</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UI3DEventHandlerNode</span> </span>{\n    <span class=\"hljs-keyword\">public</span> next:UI3DEventHandlerNode|<span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">public</span> prev:UI3DEventHandlerNode|<span class=\"hljs-literal\">null</span> = <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-comment\">// Schema for UI3DSphere</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DSphereSchema = <span class=\"hljs-keyword\">new</span> MuStruct({\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-keyword\">new</span> MuUint32(),\n    <span class=\"hljs-attr\">destroyed</span>: <span class=\"hljs-keyword\">new</span> MuBoolean(<span class=\"hljs-literal\">false</span>),\n    <span class=\"hljs-attr\">position</span>: Vec3Schema,\n    <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-keyword\">new</span> MuFloat64(<span class=\"hljs-number\">1</span>),\n    <span class=\"hljs-attr\">color</span>: Vec3Schema,\n    <span class=\"hljs-attr\">onMouseChange</span>: <span class=\"hljs-keyword\">new</span> MuRefSchema&lt;UI3DMouseHandler&gt;(),\n});\n\n<span class=\"hljs-comment\">// you can define more different kind of UI3DElement</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DElementSchema = <span class=\"hljs-keyword\">new</span> MuUnion({\n    <span class=\"hljs-attr\">point</span>: UI3DSphereSchema,\n});\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> UI3DElement = <span class=\"hljs-keyword\">typeof</span> UI3DElementSchema.identity;\n\n<span class=\"hljs-comment\">// an event record</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DEventSchema = <span class=\"hljs-keyword\">new</span> MuStruct({\n    <span class=\"hljs-comment\">// hit distance</span>\n    <span class=\"hljs-attr\">hitDistance</span>: <span class=\"hljs-keyword\">new</span> MuFloat64(),\n    <span class=\"hljs-comment\">// event type</span>\n    <span class=\"hljs-attr\">event</span>: <span class=\"hljs-keyword\">new</span> MuUnion({\n        <span class=\"hljs-attr\">mouse</span>: UI3DMouseEventSchema,\n    }),\n    <span class=\"hljs-comment\">// event handler</span>\n    <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-keyword\">new</span> MuRefSchema&lt;<span class=\"hljs-function\">(<span class=\"hljs-params\">event:<span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-built_in\">boolean</span>&gt;(),\n});\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DEventQueueSchema = <span class=\"hljs-keyword\">new</span> MuArray(UI3DEventSchema, <span class=\"hljs-literal\">Infinity</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> UI3DEventQueue = <span class=\"hljs-keyword\">typeof</span> UI3DEventQueueSchema.identity;\n\n<span class=\"hljs-comment\">// Schema for UI3DState</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> UI3DStateSchema = <span class=\"hljs-keyword\">new</span> MuStruct({\n    <span class=\"hljs-attr\">idCounter</span>: <span class=\"hljs-keyword\">new</span> MuUint32(),\n\n    <span class=\"hljs-comment\">// elements list</span>\n    <span class=\"hljs-attr\">elements</span>: <span class=\"hljs-keyword\">new</span> MuArray(UI3DElementSchema, <span class=\"hljs-literal\">Infinity</span>),\n\n    <span class=\"hljs-comment\">// event handler list</span>\n    <span class=\"hljs-attr\">eventHandlers</span>: <span class=\"hljs-keyword\">new</span> MuRefSchema&lt;UI3DEventHandlerNode&gt;(),\n\n    <span class=\"hljs-comment\">// previous event handler list</span>\n    <span class=\"hljs-attr\">prevEventStack</span>: UI3DEventQueueSchema,\n});\n</code></pre>\n<p>Now let’s come back to React, we need to create the <code>UI3DContext</code> and defined a component to provide the context provider.</p>\n<div class='preCodeBlock'></div>\n<pre><code class=\"language-Typescript\"></code></pre>\n","title":"3D UI of Box3 Game Editor","pic":"/images/3d-ui/1.png","keyword":"React, Context API, WebGL","description":"In Box3 Game Editor, we need 3dUI to control the object, this is how I implement it with React and WebGL","date":"2019-07-12"}},"__N_SSG":true}