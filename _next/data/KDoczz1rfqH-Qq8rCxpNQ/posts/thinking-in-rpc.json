{"pageProps":{"postData":{"id":"thinking-in-rpc","contentHtml":"<div class='markdown'></div>\n<h1>Remote Procedure Calls</h1>\n<p>Today, whenever we think about how to implement client-server interaction, REST API is the pattern that always come first. Well, although it is tried and true, it is not the only pattern we can use. Before REST API become popular,  RPC has been used in various situations. Ever since the Nodejs take a place in a server-side language, adopt the RPC pattern for designing the client-server API may be a very interesting approach.</p>\n<p>Before we go further into this, we need to understand what is RPC, and why it is different from REST API as well as we shouldn’t use the rule of the REST to judge the RPC.</p>\n<p>Remote Procedure Call (RPC) is a protocol that one program can use to request a service from a program localted in another computer on a network without having to understand the network’s details.</p>\n<ul>\n<li>However, because we are dealing with an environment in which the processes are excuting on separate systems, we must use a <strong>message based communication scheme</strong> to provide remote service.</li>\n<li>The RPC system hides the details that allow communication to take place by providing a stub on the client side.</li>\n<li>Typically, a sparate stub exist for each separate remote procedure.</li>\n<li>When the client invokes a remote procedure, the RPC system call the approriate stub, passing it the parameters provided to the remote procudure. This stub locates the port ont the server and marshals the parameters.</li>\n<li>Parameter marshalling involves packaging the parameters into a form that can be transmitted over a network.</li>\n<li>The stub then transmits a message to the server using message passing.</li>\n<li>A similar stub on the server side receives this message and invokes the procedure on the server.</li>\n<li>If necessary, return values are passed back to the client using the same technique.</li>\n</ul>\n<p>The REST API, in contrast, models the various entities within the problem domain as resources, and uses HTTP verbs to represent transactions against these resources - POST to create, PUT to update, and GET to read. All of these verbs, invoked on the same URL, provide different functionality. Common HTTP return codes are used to convey status of the requests.</p>\n<ul>\n<li>REST must be stateless: not persisting sessions between requests.</li>\n<li>Responses should declare cacheablility: helps your API scale if clients respect the rules.</li>\n<li>REST focuses on uniformity: if you’re using HTTP you should utilize HTTP features whenever possible, instead of inventing conventions.</li>\n</ul>\n<p>In short, RPC treats the client’s request to the server as a call to a remote function while REST API see it as an acquisition of resources.</p>\n<h2>Remote and Async</h2>\n<p>This is the moment when JavaScript become really handy. The ability of handling async function is simply inside JavaScript’s veins. While in RPC, what we need to achieve just a little bit different, that we need to hide all the detail of making http request and turn the remote function invoke looks like call a local async function.</p>\n<h3>Design the architecture</h3>\n<p><strong>protocol</strong></p>\n<p>A protocol is the description of the api between a client and a server. You can define multiple different protocols in your application for different functionalities, with equal number of client-server pairs each dedicated to one of the protocols.</p>\n<p><strong>client/server</strong></p>\n<p>All communications are initiated by client. Client calls, server executes. Client can only communicate with server through the api defined by the protocol, which means they both need to “understand” the same protocol.</p>\n<p><strong>transport</strong></p>\n<p>Client and server take care of invocation and execution, while transport takes care of message passing. Transports are protocol-agnostic. It means different servers can share the same server transport. Similarly, different clients can share one client transport.</p>\n<p>Ok, finished talking, let’s try to build a real RPC library, we also gonna write a simple demo program to show how to use this library. You can checkout out <a href=\"https://github.com/Francis-Tao-jinjin/web-app-setup/tree/rpc\">this repo</a> to see the final code. The project is setup base on the <a href=\"https://francis-tao-jinjin.github.io/posts/web-app-setup-1\">WebApp setup from scratch</a>.</p>\n<h3>Protocol</h3>\n<!-- We are gonin First, we  -->\n","title":"Thinking In RPC","pic":"/images/thinking-in-rpc/rpc.png","keyword":"Remote Procedure Calls, NodeJs","description":"Ever since the Nodejs take a place in a server-side language, adopt the RPC pattern for designing the client-server API may be a very interesting approach.","date":"2019-08-01"}},"__N_SSG":true}